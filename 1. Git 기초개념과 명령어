1. Git : 리누스 토발즈가 개발한 분산형 버전 관리 시스템(VCS)이다
         리누스 토발즈 : 리눅스, Git의 창시자임
    0) 리눅스 프로젝트에서 사용하던 Bitkeeper가 상용화(2주만에)되었다
    1) 2005년 Git 탄생하였음
    2) 커뮤니케이션을 위해 만들어짐 
    3) VCS(Version Control System), DVCS (Distributed Version Control System)
        - 데이터의 과거와 현재 상태를 관리하는 시스템.
        - 복수의 사람들이 사용하는 것이다.
    4) 동시 다발적인 브랜치 작업을 할수있게 해줌 
    5) 대중성, 검증된 안정성
    6) 왜 Git을 쓰나? -- 협업
    7) 협업시 서로 간에 상태를 똑같게 유지하는 기능을함.

2. GitHub
    1) Git 기반 사이트
    2) 프로젝트 호스팅하는 사이트 
    3) 2008년 2월 서비스 시작함.

3. Git 장점
    1) 이력 기록 및 추적
    2) 원격 저장소 및 공유
    3) 변경 이력 병합

4. 기본 명령어
    pwd : 현재 디렉토리 위치를 보여줌
    dir : 현재 디렉토리에 있는 파일들을 보여줌
    ls : 현재 디렉토리에 있는 내용을 보여줌	
    ls -al : 현재 디렉토리에 숨겨져 있는 내용들까지 다 보여줌
    cd : 디렉토리 이동
    cat : 파일의 내용을 보여줌
    git commit -am "" : add와 coomit을 한꺼번에 같이 해주는 명령어. 
                        a는 add를 뜻하고 m은 메세지를 뜻함 최초 한번은 add가 되어야 됨
   touch : 파일 생성해주는 명령어
   rm : 파일 삭제해주는 명령어
   git config --global core.editor "" : 기본 깃 텍스트 에디터 설정.
   git reset --hard : 내가 원하는 버전으로 리셋하겠다. 내가 수정하던 것 까지 지움
   수정하고 있던것은 살리고 싶으면 hard 대신 soft or mixed
   복사하기 : Ctrl + Insert
   붙여넣기 : Shift + Insert
   git revert : 이전 이력은 그대로 두고, 되돌릴 commit의 코드만 원복한다.
   git commit --amend : git commit 메세지의 내용을 변경할 수 있음          
    1) 저장소(Repository)생성
       - git init
          - 실행한 위치 Git 저장소로 초기화
    2) vim
       - 리눅스, UNIX 에서 사용할수 있는 텍스트 편집기
       - i 키 누름
          - 일반 모드 => 입력 모드 전환됨.
       - Esc 키 누름
          - 입력 모드 => 일반 모드 전환됨.
       - : 키 누르름
          - 명령 모드 전환됨(명령어 입력 가능)
             - wq(저장,종료)   
      nano를 이용하여 편집할 수도 있다.

    3) 저장소 상태 확인
       - git status

    4) 저장소에 파일 추가
       - git add 파일 이름
          - 해당 파일 Git이 추적할 수 있게 추가함.
          - 파일 기록 추적하도록 추가.
       - git add . 를 사용하면 모든 파일을 추적할 수 있게 해줌
    5) 저장소에 수정 내역 제출 
       - git commit -m "메세지"
          - commit(커밋) : '의미'를 가질수 있게 되는 최소한의 단위
       - 변경된 파일을 저장소에 제출하면서 메세지도 전달해줄 수 있음.
    6) 커밋 로그를 조회하는 명령어
         -git log 
         -git log -p
               -patch
               -파일 단위에서 변경한 내용을 보여줌.
         -git log-[숫자]
               - 최근 몇 개의 커밋을 보여줄지 지정함.
         -git log --stat
               - 각 커밋의 통계 정보 볼수 있음
                    -어떤 파일이 수정되었고, 각 파일에서 몇 줄이 추가, 삭제되었는지 의미함.
         -git log --pretty=oneline
               - 각 커밋을 한 줄로 보여줌
         -git log --pretty=oneline --graph
               - 여러 브랜치를 생성하고 병합하는 작업을 가시적으로 그래프적으로 표시함.
         -git log --all --oneline --graph
               - 모든 브랜치들의 커밋내용을 한줄로 그래프 형식으로 보여줌
     7) 브랜치 병합
         -git merge 브랜치이름
           - 현재 작업 중인 브랜치에 '브랜치이름'의 브랜치 끌어와 병합함.

5. 깃 작업 트리(working tree)
    1) 작업 디렉터리(work Directory)
      - 실제 작업 중인 파일들이 존재하는 영역임.
      - 파일 생성, 기존 파일을 수정
    2) 스테이징 영역(Staging Area)
      - 작업 디렉토리에서 작업 중인 파일 중 깃이 추적하는 파일들을 식별하는 영역
      - 실제로는 .git 숨김 폴더 내부의 index 파일에서 추적하는 파일들을 식별하고 있음.
    3) 지역 저장소(Local Repository)
      - 스테이징 영역에서 추적되는 파일이 커밋으로 등록되는 영역
      - 스테이징 영역의 파일 혹은 파일들이 하나의 변경 단위인 커밋으로 등록되는 과정임.
         
6. git add 명령으로 스테이징 영역에 파일이 추가됨.
    1) Stage : 커밋으로 기록할 수 있는 최종 상태
      - Tracked 상태와 Unmodified 상태
    2) Unstage : 스테이징 영역에 있지만, 파일에 변화가 있는 상태
      - 커밋으로 기록할 수 있는 상태가 아님.

7. 새로운 브랜치 생성 및 이동
    0) 브랜치 (branch)
      - 프로젝트 기준 코드인 main 브랜치로부터 독립적인 작업 공간을 만들어주는 기능.
      - 여러 개발자가 서로 다른 버전의 코드를 만들 때 서로의 작업에 영향을 주고받지
        않기 위해 필요하다.
    1) 저장소에 브랜치 추가
      - git branch 이름 
    2) 작업중인 브랜치 변경
      - git checkout 브랜치 이름
    3) 충돌 발생
      - 각 브랜치가 하나의 파일 동시에 수정하는 경우 생김.
      - Comflict 해결해야함.
         - 병합하면서 생기는 충돌은 해결 해야함.
      - 병합 실패한 코드에서 내용 확인.
         - 충돌 발생 부분 시작 표시
           - <<<<<<<<<<HEAD
         - 충돌 난 부분 끝 표시
           - >>>>>>>>>>ezen
         - 경계 표시 
           - ==========
     4) 병합 실패한 경우의 내용 확인
         - 수동으로 충돌 해경해야 함.
            - 충돌 난 두 브랜치 중 하나 내용 선택 or
            - 두 수정 내역 합침.
         - 충돌 난 부분이 어떤 의미인지 이해하고 있어야 해결 가능.
1. GitHub
   1) 협업시 중요한 개념
      - Git의 원격 저장소 부분임.
         - Git의 핵심임.
   2) 원격 저장소 제공
   3) Git을 이용한 프로젝트 종합 관리 가능
   4) 할수 있는 것 (협업 플랫폼)
      - 개발
      - 일반적인 여러 활동에 사용

2. 포크(Fork)
   - 다른 사람의 원격 저장소를 내 계정으로 복사
      - 자유롭게 파일 생성,수정 반영이 가능함.

3. 원격 저장소
   1) 원격 저장소 내용의 로컬 저장소로 가져옴.
   2) 로컬 저장소를 원격 저장소와 연결, 보냄, 수정, 병합 등.
   3) git clone, git remote, git push, git fetch, git pull

4. git clone 
   1) 원격 저장소 내용 => 로컬 저장소로 가져오기
   2) GitHub에서 로컬 환경으로 복사하는 것
      - vs 포크(fork) : GitHub에서 원격 저장소 복사하는 것.
   3) origin
      - 원격 저장소의 별명.

5. git remote 
   1) 로컬 저장소와 원격 저장소를 연결하기 
   2) 협업  
      - 빈 원격 저장소 생성 
      - 최소한의 뼈대 프로젝트 생성 (구조 만듦)
      - 협업하는 사람 모두가 원격 저장소를 클론(clone)
      - 각자 분담부분 작업 진행
   3) git remote add 저장소 별칭 원격저장소
   4) 원격저장소와 로컬 저장소 연결 되었는지 확인
      - git remote -v

6. git push 
   1) 로컬 작업 내역을 원격 저장소에 올리기
   2) 작업 결과물을 개발자들과 공유
   3) 기본적으로 커밋들을 원격 저장소의 main 브랜치에 업로드.
   4) 형식
      - git push 원격저장소별칭 로컬브랜치이름
         - git push origin main
            - 원격 저장소에 commit된 파일들을 모두 업로드

7. git fetch 
   1) 원격 저장소에 당연히 다른 개발자들이 커밋할 경우가 생김.
      - 내 로컬 저장소와 원격 저장소 내용에 차이가 발생함.
      - => 이런 경우 Git은 푸시 불허함.

      - 먼저 로컬 저장소의 커밋들을 원격 저장소와 맞춰야 함.(동기화)
      - => 이떄 하는 것이 패치(fetch)
   2) 작업 순서
      - 로컬로 가져온 커밋들
      - 자신의 기존 로컬 저장소 작업과 병합
      - 원격 저장소에 제출

8. git pull 
   1) 원격저장소 정보(commit 커밋들)가져오면 (fetch)
   2) 자동으로 로컬 브랜치에 병합까지 수행함.
      - 어떤 내용이 병합되면서 바뀌게 되는지 알수 없다.
      
9. git diff : commit 이나 branch 사이에 다른점 혹은 파일이나
              Repository와 Working Directory 사이의 다른점을 보여주는 명령어

10. 협업을 위한 GitHub 기능 
   1) 저장소 협업자 등록하기
   2) 저장소 이슈를 위한 새로운 라벨 생성하기
   3) 저장소 이슈 생성하기
   4) 프로젝트 보드 생성하기 

      